#!/bin/bash
## Example for thisDir
#thisDir="$(cd "$(dirname "$0")"; pwd)"
#. "$thisDir/tools" # import tools

if [ ! -e "$thisDir" ]; then
  echo "Please set variable \$thisDir correctly!";
  exit 1
fi

getVarValFile(){
  local file=$1
  local var=$2

  grep -Po "(?<=^$var=).*" $file
}

export distID="$(getVarValFile /etc/os-release ID)"

packageDependency(){
  local pkgs="$@"
  local missingPkgs=""
  case "$distID" in
    arch)
      cmd="pacman -Q"
    ;;
    debian|ubuntu|raspbian)
      cmd="dpkg -l"
    ;;
  esac

  for p in $pkgs; do
    $cmd $p >& /dev/null || {
      missingPkgs+="$p "
    }
  done

  [ -z "$missingPkgs" ] || {
    echo "Missing Packages: $missingPkgs
exit."
    exit 1
  }
}

packageDependency bc rsync

export TOOLS_SRC=true # Testing complete, tools sourced

thisTimeFormat="+%Y%m%d-%H%M%S"
thisSrcTime="$(date "$thisTimeFormat")" # time when this script was sourced
thisName="$(basename $0)"

cyan='\e[0;36m'
boldBright='\e[1m'
resetFormat='\e[0m'


printInfo(){
  echo -e "$cyan$1$resetFormat"
}

# usage: test if variable $v1 and $v2 are set:
# varIsSetOrError "v1" "v2"
varIsSetOrError(){ # $1: varName ... $n: varName
  local errMsg=""
  while [ "$#" -gt 0 ]; do
    local varName="$1"
    local varValue="${!1}"
    [ -n "$varValue" ] ||
      errMsg+="ERROR: \$$varName was not set.\n"
    shift
  done
  [ -z "$errMsg" ] || {
    printInfo "$errMsg"
    caller
    exit 1
  }
}

getFlag(){ # $1: input, $2: default=(false|true)
  local flg="${1:-$2}"
  flg="$(sed -E 's/Y|y|1/true/g;s/N|n|0/false/g' <<< "$flg")"
  echo "$flg"
}

question(){ # $1: msg, $2: ansPreDef=false
  local ansPreDef=${2:-false}
  local anstxt="[y/N]"
  if $ansPreDef; then
    anstxt="[Y/n]"
  fi
  local ans=""
  while
    printInfo "$1 $anstxt"
    read ans
    ! grep -Ei '^[yn]$|^$' <<< "$ans" &> /dev/null; do
    true
  done

  $(getFlag "$ans" "$ansPreDef") && {
    return 0
  } || {
    return 1
  }
}

showMenuRetNum(){ # $1: msg, $2: opt1, $3: opt2, ...; returns menu number in $input
  local msgopt="$1\n" # msg
  shift # shifts to next param
  if [ -z "$1" ]; then
    echo "ERROR: No options."
    exit 1
  fi
  local cnt=1
  while [ -n "${!cnt}" ]; do
    msgopt+=" [$cnt] ${!cnt}\n" # opts
    ((cnt++))
  done
  input=0
  while ! [ $input -ge 1 -a $input -lt $cnt ]; do
    printf "$msgopt"
    read input
  done
#  echo "${FUNCNAME[1]}: $input" # don't use echo to return results, otherwise you will not be able to show menu
}

showMenu(){ # $1: msg, $2: opt1, $3: opt2, ...; returns menu option in $input
  showMenuRetNum "$@"
  shift # shift away msg
  input="${!input}" # translates selection number to menu option
#  echo "${FUNCNAME[1]}: $input" # don't use echo to return results, otherwise you will not be able to show menu
}

numDigits(){ # $1: digits
  local num
  read num
  printf "%0$1i\n" $num
}

calcRunTime(){ # $1: start, $2: end
  local   d="$(bc <<< "(${2} - ${1}) / (24 * 60 * 60)")"
  local   h="$(bc <<< "(${2} - ${1}) / (60 * 60) % 24" | numDigits 2)"
  local min="$(bc <<< "(${2} - ${1}) / 60 % 60"        | numDigits 2)"
  local   s="$(bc <<< "(${2} - ${1}) % 60 / 1"         | numDigits 2)" # / 1 -> to int, because (scale=0)
  local  ms="$(bc <<< "(${2} - ${1}) % 1 * 1000 / 1"   | numDigits 3)"
  echo "${d}d $h:$min:$s.$ms"
}

printRunTime(){ # $1: start, $2: end  ## needed for log()
  echo "Runtime: $(calcRunTime $1 $2)"
}

getLogPath(){ # [$1: additionalName, $2: logD (directory containing log/)]
  local logD="${2:-${thisDir}/log}"
  local logPath="$logD/${thisSrcTime}_${thisName}"
  if [ -n "$1" ]; then
    logPath+="__$1"
  fi
  logPath+=".log"
  echo "$logPath"
}

log(){ # [$1: additionalName, $2: logD (directory containing log/), $3: printInfo=true]
  local logPath="$(getLogPath "$1" "$2")"
  mkdir -p "$(dirname $logPath)"
  local prntInfo="$(getFlag $3 true)"
  local start="$(date '+%s.%N')"
  tee -a "$logPath"
  local end="$(date '+%s.%N')"
  if $prntInfo; then
    printRunTime $start $end | tee -a "$logPath"
    echo "Logfile: $logPath"
  fi
}

chAddConf(){
  local confFile="$1"
  local conf="$2"
  local val="$3"
  local sep="${4:- }"
  
  sudo grep -E "^[ ]*$conf$sep" "$confFile" > /dev/null && {
    # config exists
    sudo sed -i "s/^[ ]*$conf$sep.*/$conf$sep$val/g" "$confFile"
  } || {
    sudo grep -E "^[# ]*$conf$sep" "$confFile" > /dev/null && {
      # config commented
      sudo sed -i "s/^[# ]*$conf$sep.*/$conf$sep$val/g" "$confFile"
    } || {
      # no config
      sudo tee -a "$confFile" <<< "$conf$sep$val" > /dev/null
    }
  }
}

rsyncMenu(){ # $1: rsyncOpts, $2: pathName1, $3: path1, $4: pathName2, $5: path2, $6: pre[=""], $7: dry-run[=true]
  # Usage example:
  #  rsyncMenu "-uav --del" \
  #    "Server" "server:/home/user1/somedir/" \
  #    "Local" "/home/user0/somedir/"
  local rsyncOpts="$1"
  
  local pathName1="$2"
  local path1="$3"
  
  local pathName2="$4"
  local path2="$5"
  
  local pre="$6"
  
  local dryRun="$(getFlag "$7" "true")"
  
  local src dst
  showMenu "Where do you want to copy the files to?" \
    "$pathName1" \
    "$pathName2"
  res="$input" # leave result global
  if [ "$res" == "$pathName1" ]; then
    src="$path2"
    dst="$path1"
  else
    src="$path1"
    dst="$path2"
  fi
  
  if $dryRun; then
    $pre rsync $rsyncOpts --dry-run "$src" "$dst" | grep -E "deleting|" --color=always
  fi
  if question "Do you want to continue?
(cp to $input: $src -> $dst)"; then
    $pre rsync $rsyncOpts "$src" "$dst"
  else
    exit
  fi
}
