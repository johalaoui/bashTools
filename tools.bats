#!/usr/bin/env -vS bats
# DO NOT USE: set +e, otherwise testing will not show errors

setup(){
  thisDir="$BATS_TEST_DIRNAME"
  . "$thisDir/tools" # import tools
  
  testDir="$thisDir/testtmp"
  mkdir -p "$testDir"
}

teardown(){
  rm -rf "$testDir"
  echo ""
}


setupChAddConfig(){
  cat << EOF | tee "$testDir/chAddConfigTestF" > /dev/null
# this is an important test file which is generated by $0
var1=22
#var2=23
#var3=3
EOF
}

@test "chAddConf 1: config already set" {
  setupChAddConfig
  chAddConf "$testDir/chAddConfigTestF" "var1" "22" "="
  diff "$testDir/chAddConfigTestF" <(cat << EOF
# this is an important test file which is generated by $0
var1=22
#var2=23
#var3=3
EOF
)
}

@test "chAddConf 2: config changed" {
  setupChAddConfig
  chAddConf "$testDir/chAddConfigTestF" "var1" "24" "="
  diff "$testDir/chAddConfigTestF" <(cat << EOF
# this is an important test file which is generated by $0
var1=24
#var2=23
#var3=3
EOF
)
}

@test "chAddConf 3: uncomment config & change" {
  setupChAddConfig
  chAddConf "$testDir/chAddConfigTestF" "var2" "27" "="
  diff "$testDir/chAddConfigTestF" <(cat << EOF
# this is an important test file which is generated by $0
var1=22
var2=27
#var3=3
EOF
)
}

@test "chAddConf 4: insert config at the end" {
  setupChAddConfig
  chAddConf "$testDir/chAddConfigTestF" "var5" "231" "="
  diff "$testDir/chAddConfigTestF" <(cat << EOF
# this is an important test file which is generated by $0
var1=22
#var2=23
#var3=3
var5=231
EOF
)
}

@test "chAddConf 5: insert config at the end without changing first one" {
  setupChAddConfig
  chAddConf "$testDir/chAddConfigTestF" "var1=512"
  diff "$testDir/chAddConfigTestF" <(cat << EOF
# this is an important test file which is generated by $0
var1=22
#var2=23
#var3=3
var1=512 
EOF
)
}

@test "question 1.1: Default true" {
  question "Ok?" true <<< ""
}

@test "question 1.2: Default false" {
  ! question "Ok?" false <<< ""
}

@test "question 1.3: Default true: y" {
  question "Ok?" true <<< "y"
}

@test "question 1.4: Default false: y" {
  question "Ok?" false <<< "y"
}

@test "question 1.5: Default true: n" {
  ! question "Ok?" true <<< "n"
}

@test "question 1.6: Default false: n" {
  ! question "Ok?" false <<< "n"
}

@test "question 2.1: Default true: Question 2nd time." {
  question "Ok?" true <<< "f
  "
}

@test "question 2.2: Default false: Question 2nd time." {
  ! question "Ok?" false <<< "f
  "
}

@test "question 2.3: Default true: Question 2nd time: y" {
  question "Ok?" true <<< "f
  y"
}

@test "question 2.4: Default false: Question 2nd time: y" {
  question "Ok?" false <<< "f
  y"
}

@test "question 2.5: Default true: Question 2nd time: n" {
  ! question "Ok?" true <<< "f
  n"
}

@test "question 2.6: Default false: Question 2nd time: n" {
  ! question "Ok?" false <<< "f
  n"
}

@test "showMenu 1.1: Pizza." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "1"
  [ "$input" == "Pizza" ]
}

@test "showMenu 1.2: Chips." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "2"
  [ "$input" == "Chips" ]
}

@test "showMenu 1.3: Apple." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "3"
  [ "$input" == "Apple" ]
}

@test "showMenu 2.1: Pizza after invalid selection." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "4
1"
  [ "$input" == "Pizza" ]
}

@test "showMenu 2.2: Chips after invalid selection." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "0
2"
  [ "$input" == "Chips" ]
}

@test "showMenu 2.3: Apple after invalid selection." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "99
3"
  [ "$input" == "Apple" ]
}


@test "showMenu 2.4: Apple after invalid selection." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "-99
3"
  [ "$input" == "Apple" ]
}

@test "showMenu 2.5: No oranges after invalid selection." {
  showMenu "What do you want?" "Pizza" "Chips" "Apple" <<< "-1
3"
  [ "$input" != "Oranges" ]
}

